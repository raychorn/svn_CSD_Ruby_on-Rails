require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe InterpretersController do

  # This should return the minimal set of attributes required to create a valid
  # Interpreter. As you add validations to Interpreter, be sure to
  # update the return value of this method accordingly.
  # def valid_attributes
    # {}
  # end
# 
  # # This should return the minimal set of values that should be in the session
  # # in order to pass any filters (e.g. authentication) defined in
  # # InterpretersController. Be sure to keep this updated too.
  # def valid_session
    # {}
  # end
# 
  # describe "GET index" do
    # it "assigns all interpreters as @interpreters" do
      # interpreter = Interpreter.create! valid_attributes
      # get :index, {}, valid_session
      # assigns(:interpreters).should eq([interpreter])
    # end
  # end
# 
  # describe "GET show" do
    # it "assigns the requested interpreter as @interpreter" do
      # interpreter = Interpreter.create! valid_attributes
      # get :show, {:id => interpreter.to_param}, valid_session
      # assigns(:interpreter).should eq(interpreter)
    # end
  # end
# 
  # describe "GET new" do
    # it "assigns a new interpreter as @interpreter" do
      # get :new, {}, valid_session
      # assigns(:interpreter).should be_a_new(Interpreter)
    # end
  # end
# 
  # describe "GET edit" do
    # it "assigns the requested interpreter as @interpreter" do
      # interpreter = Interpreter.create! valid_attributes
      # get :edit, {:id => interpreter.to_param}, valid_session
      # assigns(:interpreter).should eq(interpreter)
    # end
  # end
# 
  # describe "POST create" do
    # describe "with valid params" do
      # it "creates a new Interpreter" do
        # expect {
          # post :create, {:interpreter => valid_attributes}, valid_session
        # }.to change(Interpreter, :count).by(1)
      # end
# 
      # it "assigns a newly created interpreter as @interpreter" do
        # post :create, {:interpreter => valid_attributes}, valid_session
        # assigns(:interpreter).should be_a(Interpreter)
        # assigns(:interpreter).should be_persisted
      # end
# 
      # it "redirects to the created interpreter" do
        # post :create, {:interpreter => valid_attributes}, valid_session
        # response.should redirect_to(Interpreter.last)
      # end
    # end
# 
    # describe "with invalid params" do
      # it "assigns a newly created but unsaved interpreter as @interpreter" do
        # # Trigger the behavior that occurs when invalid params are submitted
        # Interpreter.any_instance.stub(:save).and_return(false)
        # post :create, {:interpreter => {}}, valid_session
        # assigns(:interpreter).should be_a_new(Interpreter)
      # end
# 
      # it "re-renders the 'new' template" do
        # # Trigger the behavior that occurs when invalid params are submitted
        # Interpreter.any_instance.stub(:save).and_return(false)
        # post :create, {:interpreter => {}}, valid_session
        # response.should render_template("new")
      # end
    # end
  # end
# 
  # describe "PUT update" do
    # describe "with valid params" do
      # it "updates the requested interpreter" do
        # interpreter = Interpreter.create! valid_attributes
        # # Assuming there are no other interpreters in the database, this
        # # specifies that the Interpreter created on the previous line
        # # receives the :update_attributes message with whatever params are
        # # submitted in the request.
        # Interpreter.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        # put :update, {:id => interpreter.to_param, :interpreter => {'these' => 'params'}}, valid_session
      # end
# 
      # it "assigns the requested interpreter as @interpreter" do
        # interpreter = Interpreter.create! valid_attributes
        # put :update, {:id => interpreter.to_param, :interpreter => valid_attributes}, valid_session
        # assigns(:interpreter).should eq(interpreter)
      # end
# 
      # it "redirects to the interpreter" do
        # interpreter = Interpreter.create! valid_attributes
        # put :update, {:id => interpreter.to_param, :interpreter => valid_attributes}, valid_session
        # response.should redirect_to(interpreter)
      # end
    # end
# 
    # describe "with invalid params" do
      # it "assigns the interpreter as @interpreter" do
        # interpreter = Interpreter.create! valid_attributes
        # # Trigger the behavior that occurs when invalid params are submitted
        # Interpreter.any_instance.stub(:save).and_return(false)
        # put :update, {:id => interpreter.to_param, :interpreter => {}}, valid_session
        # assigns(:interpreter).should eq(interpreter)
      # end
# 
      # it "re-renders the 'edit' template" do
        # interpreter = Interpreter.create! valid_attributes
        # # Trigger the behavior that occurs when invalid params are submitted
        # Interpreter.any_instance.stub(:save).and_return(false)
        # put :update, {:id => interpreter.to_param, :interpreter => {}}, valid_session
        # response.should render_template("edit")
      # end
    # end
  # end
# 
  # describe "DELETE destroy" do
    # it "destroys the requested interpreter" do
      # interpreter = Interpreter.create! valid_attributes
      # expect {
        # delete :destroy, {:id => interpreter.to_param}, valid_session
      # }.to change(Interpreter, :count).by(-1)
    # end
# 
    # it "redirects to the interpreters list" do
      # interpreter = Interpreter.create! valid_attributes
      # delete :destroy, {:id => interpreter.to_param}, valid_session
      # response.should redirect_to(interpreters_url)
    # end
  # end

end
